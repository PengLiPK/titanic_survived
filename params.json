{"name":"Titanic survivals","tagline":"A machine learning project to predict survivals in Titanic sinking tragedy","body":"### Titanic survivals\r\nTitanic survivals is a project of predicting survivals of Titanic sinking tragedy. The details of the project is on [kaggle](https://www.kaggle.com/c/titanic). There are training and testing data set for this project. The data are available on [kaggle](https://www.kaggle.com/c/titanic). The problem of this project is a classification problem. With the information of passengers and whether they survived in training data set, the survival model is built. Then the model is applied to the passengers in testing data set to predict whether they survived or not.\r\n\r\n#### Data set\r\nThe training and testing data set are availble on [kaggle](https://www.kaggle.com/c/titanic). Data set is read by [Pandas] as following:   \r\n```python\r\nimport pandas as pd\r\ntrain_df = pd.read_csv(\"./train.csv\")\r\n```\r\n\r\n#### Relation between information and survival\r\nBefore building model, it is needed to determine what information is related to survival. For example, does gender/price of ticket affect survival? Then unrelated information can be removed. More complex methods can be used to determine the relation.\r\n\r\nThis image shows the relation between gender and survival:      \r\n![gender](./images/gender.png)\r\n\r\nThis images shows the effect of the price of ticket:   \r\n![gender](./images/pot.png)\r\n\r\n\r\n\r\n#### Data cleansing\r\nData cleansing prepare the data for machine learning. This process includes filling N/A, dropping useless columns and representing the string column with numbers. If the data are in Pandas data frame, it is easy to use Pandas do all of these.\r\n\r\n* Filling N/A data\r\n```python\r\ntrain_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"S\")\r\n```\r\n* Dropping columns\r\n```python\r\ntrain_df = train_df.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)\r\n```\r\n\r\n* Representing the string column with numbers\r\n```python\r\ntrain_df[\"Sex\"] = train_df[\"Sex\"].map({'female':0, 'male':1}).astype(int)\r\n```\r\n\r\n#### Building machine leaning model and predicting\r\n[Scikit-learning](http://scikit-learn.org/stable/) is used to build machine learning model and predict the survivals. Using of Scikit-learning is very easy as the following:\r\n\r\n```python\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nforest = RandomForestClassifier(n_estimators=100)\r\nforest.fit(xtrain,ytrain)\r\noutput = forest.predict(testdata).astype(int)\r\n```   \r\n\r\nThis is an example of using Random Forest Tree. `xtrain` and `ytrain` can be pandas data frame and are from training data set. `xtrain` contains the information of passengers, and `ytrain` only has one column of survival information.   \r\n`testdata` has the same format as `xtrain`, but from testing data set. `output` is a python list with survival information (survived = 1, not_survived = 0).","google":"UA-73791386-4","note":"Don't delete this file! It's used internally to help with page regeneration."}